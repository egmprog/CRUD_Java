package Principal;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JOptionPane;

/**
 * Comentarios de documentación
 * Título del programa
 * 
 * @autor: Grupo 1
 * @version 1.0
 */

public class Main {
    // zona para variables globales, constantes, metodos
    //VARIABLES
    private static final String FILE_PATH = "alumnos.txt";

    // MÉTODOS
    //método para escribir los datos ingresados por teclado en un arryList
    private static ArrayList<Alumno> cargarDatosScanner() {
        ArrayList<Alumno> listaDeAlumnos;
        return (null);
        //return listaDeAlumnos();
    }

    //método para escribir en un archivo de texto
    public static void altaAlumno(String nombre, String apellido, int dni, String email, int comision) {
          try (BufferedWriter buffer = new BufferedWriter(new FileWriter(FILE_PATH, true))) {               
               buffer.write(nombre + ", " + apellido + ", " + dni + ", "+email+", "+comision);
               buffer.newLine();
          } catch (IOException e) {
               System.out.println("No se pudo grabar en el archivo" + e.getMessage());
          }
     }

    public static void main(String[] args) throws Exception {
        // código principal
        // declaración de variables
        Scanner teclado = new Scanner(System.in);
        String nombre="", apellido="", email="";
        int menu = 0, dni=0, comision=0;
        ArrayList<Alumno> listaDeAlumnos= new ArrayList<Alumno>();
        //listaDeAlumnos = cargarDatosScanner();

        // menu principal de opciones
        while (menu != 6) {
            menu = Integer.parseInt(JOptionPane.showInputDialog("     MENU PRINCIPAL    " + "\n" +
                    "1.- Ingresar Alumno" + "\n" +
                    "2.- Listar Alumno " + "\n" +
                    "3.- Quitar Alumno " + "\n" +
                    "4.- Modificar Alumnos " + "\n" +
                    "5.- Buscar Alumnos " + "\n" +
                    "6.- Salir"));

            switch (menu) {
                case 1:
                    // Sub menu ingresar alumno
                    System.out.println("Gestion ingreso de alumno - en desarrollo");
                    //cargar appellidos y nombres
                    nombre = JOptionPane.showInputDialog("Ingrese el nombre del alumno");
                    apellido = JOptionPane.showInputDialog("Ingrese el apellido del alumno");

                    //cargar y validar DNI
                    // en este caso try + catch se usa para evitar que el programa se rompa si no se ingresan números
                    try{                        
                    dni = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el DNI del alumno"));

                    // Validacion del dni (número de 8 dígitos)
                    DniValidator verificadorDni = new DniValidator();
                    int digitosCuenta = 8;
                    if (verificadorDni.validacionDni(dni, digitosCuenta)) {
                        System.out.println("El DNI tiene la cantidad correcta de dígitos.");
                    } else {
                        System.out.println("El DNI no tiene la cantidad correcta de dígitos.");
                        JOptionPane.showMessageDialog(null, "El DNI no es válido  (Número de 8 dígitos)", "Error en la carga", JOptionPane.ERROR_MESSAGE);
                        dni=Integer.parseInt(JOptionPane.showInputDialog("Ingrese nuevamente el DNI"));
                    }
                    }catch(NumberFormatException e){
                        JOptionPane.showMessageDialog(null, "El DNI no es válido. Debe ingresar número de 8 dígitos", "Error en la carga", JOptionPane.ERROR_MESSAGE);
                        dni=Integer.parseInt(JOptionPane.showInputDialog("Ingrese nuevamente el DNI"));
                        //aquí hay un problema... si el ingreso del dni es por esta línea... no se realiza la verificación del formato de 8 dígitos...
                    }

                    //cargar y verificar email
                    email = JOptionPane.showInputDialog("Ingrese el correo electrónico del alumno");

                    // validación del email (formato de mail valido, texto alfanum, arroba, texto alfanum, punto, tres letras)
                    EmailValidator validator = new EmailValidator();                    
                    if (validator.validateEmail(email)) {
                        System.out.println("La dirección de correo electrónico es válida.");
                    } else {
                        System.out.println("La dirección de correo electrónico no es válida.");
                        JOptionPane.showMessageDialog(null, "El correo electrónico no es válido", "Error en la carga", JOptionPane.ERROR_MESSAGE);
                        email = JOptionPane.showInputDialog("Ingrese nuevamente el correo electrónico del alumno");
                    }

                    //cargar y validar comisión
                    // en este caso try + catch se usa para evitar que el programa se rompa si no se ingresan números
                    try{
                    comision = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la comision"));                    

                    // Validacion de la comision (número de 5 dígitos)
                    ComisionValidator verificadorCom = new ComisionValidator();                    
                    int digitosCuentaC = 5;

                    if (verificadorCom.validacionComision(comision, digitosCuentaC)) {
                        System.out.println("La Comisión es correcta.");
                    } else {
                        System.out.println("La Comisión ingresada NO es correcta.");
                        JOptionPane.showMessageDialog(null, "La comisión ingresada es inálida (Número de 5 dígitos)", "Error en la carga", JOptionPane.ERROR_MESSAGE);
                        comision = Integer.parseInt(JOptionPane.showInputDialog("Ingrese nuevamente la comision"));
                    }
                    }catch(NumberFormatException e){
                        JOptionPane.showMessageDialog(null, "La comisión ingresada es inválida Ingrese un número de 5 dígitos)", "Error en la carga", JOptionPane.ERROR_MESSAGE);
                        comision=Integer.parseInt(JOptionPane.showInputDialog("Ingrese nuevamente la comisión"));
                        //aquí hay un problema... si el ingreso de la comision es por esta línea... no se realiza la verificación del formato de 5 dígitos...
                    }

                    //se escriben los datos ingresados en el arryList
                    listaDeAlumnos.add(new Alumno(nombre, apellido, dni, email, comision));
                    System.out.println(listaDeAlumnos);

                    //se vuelcan los datos ingresados en el archivo de texto
                    altaAlumno(nombre, apellido, dni, email, comision);

                    break;
                case 2:
                    // Sub menu listar alumno
                    System.out.println("Gestion listado de alumno - en desarrollo");

                    // Leer el archivo de texto y almacenar los datos en una estructura de datos
                    ArrayList<String> lineas = new ArrayList<>();

                    try {
                        BufferedReader br = new BufferedReader(new FileReader("alumnos.txt"));
                        String linea;                        
            
                        while ((linea = br.readLine()) != null) {
                        lineas.add(linea+"\n");
                        }
                        
                           br.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                            return;
                    }

                    System.out.println(lineas);

                    //mostrar el listado en una ventana emergente
                    // Crear una cadena con el contenido del ArrayList
                        StringBuilder contenido = new StringBuilder();
                        for (String elemento : lineas) {
                            contenido.append(elemento).append("\n");
                        }

                        // Mostrar el contenido en una ventana emergente
                        JOptionPane.showMessageDialog(null, contenido.toString(), "Listado de alumnos cargados", JOptionPane.INFORMATION_MESSAGE);

                    
                    break;
                case 3:
                    // Sub menu quitar alumno
                    System.out.println("Gestion quitar de alumno - en desarrollo");

                    //definición de un arrayList
                    ArrayList<String> lineas2 = new ArrayList<>();
                    
                    // Leer el archivo de texto y almacenar los datos en una estructura de datos dentro del arryList creado lineas2
                    try {
                        BufferedReader br2 = new BufferedReader(new FileReader("alumnos.txt"));
                        String linea2;                        
            
                        while ((linea2 = br2.readLine()) != null) {
                        lineas2.add(linea2+"\n");
                        }
                        
                           br2.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                            return;
                    }

                    System.out.println(lineas2);

                    //mostrar el listado en una ventana emergente
                    // Crear una cadena con el contenido del ArrayList
                        StringBuilder contenido2 = new StringBuilder();
                        for (String elemento2 : lineas2) {
                            contenido2.append(elemento2).append("\n");
                        }

                    //Ventana emergente que muestra los registros actuales del archivo de texto
                    JOptionPane.showMessageDialog(null, "Para eliminar un registro, fíjese el número de línea que ocupa"+"\n"+contenido2.toString(), "Listado de alumnos cargados", JOptionPane.INFORMATION_MESSAGE);

                    //indicar el número de línea a eliminar
                    int lineaE;
                    lineaE = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el número de registro (línea) a eliminar"));
                    
                    // Verificar si el número de línea a eliminar es válido
                    if (lineaE >= 0 && lineaE < lineas2.size()) {
                        // Eliminar la línea de la estructura de datos
                        lineas2.remove(lineaE);
                        
                        // Escribir las líneas restantes de vuelta al archivo de texto
                        try {
                            BufferedWriter bw2 = new BufferedWriter(new FileWriter("alumnos.txt"));
                            
                            for (String linea : lineas2) {
                                bw2.write(linea);
                                //bw2.newLine();
                            }
                            
                            bw2.close();
                            
                            System.out.println("La línea ha sido eliminada del archivo.");
                            JOptionPane.showMessageDialog(null, "La l\u00EDnea ha sido eliminada del archivo.", "Acción realizada", JOptionPane.ERROR_MESSAGE);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    } else {
                        System.out.println("El número de línea a eliminar es inválido.");
                        JOptionPane.showMessageDialog(null, "El número de registro a eliminar es inválido", "Error en la carga", JOptionPane.ERROR_MESSAGE);
                    }

                case 4:
                    // Sub menu modificar alumno
                    System.out.println("Gestion modificación de alumnos - por desarrollar");
                    System.out.println(listaDeAlumnos);
                    break;
                case 5:
                    // Sub menu buscar alumno
                    System.out.println("Gestion búsqueda de alumno - por desarrollar");
                    break;
                case 6:
                    // Sub menú salida
                    System.out.println("Gestion salida del menu principal- por desarrollar");
                    break;
                default:
                    System.out.println("Opción inválida.");

            }
        }

        // validación del email (formato de mail valido, texto alfanum, arroba, texto alfanum, punto, tres letras)
        EmailValidator validator = new EmailValidator();
        //email = "aaa@example.com";
        if (validator.validateEmail(email)) {
            System.out.println("La dirección de correo electrónico es válida.");
        } else {
            System.out.println("La dirección de correo electrónico no es válida.");
        }

        // Validacion del dni (número de 8 dígitos)
        DniValidator verificadorDni = new DniValidator();
        //dni = 12345678;
        int digitosCuenta = 8;

        if (verificadorDni.validacionDni(dni, digitosCuenta)) {
            System.out.println("El DNI tiene la cantidad correcta de dígitos.");
        } else {
            System.out.println("El DNI no tiene la cantidad correcta de dígitos.");
        }

        // Validacion de la comision (número de 5 dígitos)
        ComisionValidator verificadorCom = new ComisionValidator();
        //comision = 12345;
        int digitosCuentaC = 5;

        if (verificadorCom.validacionComision(comision, digitosCuentaC)) {
            System.out.println("La Comisión es correcta.");
        } else {
            System.out.println("La Comisión ingresada NO es correcta.");
        }

    }

    // nada aquí debajo
}
